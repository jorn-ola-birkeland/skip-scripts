#!/usr/bin/env bash
set -euo pipefail

###
### This scripts helps Appdrift in bringing applications down and up in a controlled way.
### Requires that autosync in ArgoCD is disabled for the selected apps.
###

# Validate dependencies are present
for tool in kubectl jq base64; do
    if ! command -v $tool &> /dev/null; then
        echo "Error: Tool '$tool' is missing from your \$PATH"
        exit 1
    fi
done

# Validate input arguments
if [[ $# -lt 2 ]]; then
    echo "Usage: $0 <up|down> namespace1/app1 namespace2/app2 ..."
    exit 1
fi

## Variables
mode="$1"
# Read argument into $apps
apps=("${@:2}")
# The amount of time for waiting on Kubernetes operations (10 * 60 seconds, 10 minutes)
deadline=600s

# Get unique namespaces and validate that they exists
mapfile -t unique_namespaces < <(printf "%s\n" "${apps[@]}" | cut -d'/' -f1 | sort -u)
for ns in "${unique_namespaces[@]}"; do
    if ! kubectl get namespace "$ns" &>/dev/null; then
        echo "Error: Namespace $ns not found. Aborting."
        exit 1
    fi
done

get_encoded_replicas() {
    kubectl get applications.skiperator.kartverket.no "$1" -n "$2" -o=json | jq -c '.spec.replicas' | base64
}

# Down mode
if [[ $mode == "down" ]]; then
    total_apps=${#apps[@]}
    for index in "${!apps[@]}"; do
        app="${apps[$index]}"
        namespace="${app%%/*}"
        appName="${app##*/}"

        echo "==> Bringing down app $((index+1))/$total_apps: $app"

        # Get encoded replicas
        replicas=$(get_encoded_replicas "$appName" "$namespace")

        # Check if replicas are already 0 (not considering autoscaling)
        decodedReplicas=$(echo "$replicas" | base64 -d)
        if [[ "$decodedReplicas" == "0" ]]; then
            echo "$appName is already scaled to 0, skipping..."
            continue
        fi

        # Annotate the CRD
        if ! kubectl annotate applications.skiperator.kartverket.no "$appName" -n "$namespace" \
            skip.kartverket.no/k8sReplicaLimits=ignore \
            skip.kartverket.no/migration-desired-replicas="$replicas" --overwrite &>/dev/null; then
          echo "Error annotating $appName in $namespace"
        fi

        # Set the CRD replicas to 0
        if ! kubectl patch applications.skiperator.kartverket.no "$appName" -n "$namespace" --type=merge -p '{"spec":{"replicas":0}}' &>/dev/null; then
            echo "Error patching $appName in $namespace"
        fi

        # Wait for a new Deployment to be generated by skiperator
        sleep 5

        # Watch the underlying deployment until 0 replicas exist (hiding the output)
        if kubectl rollout status deployment "$appName" -n "$namespace" --watch --timeout=$deadline &>/dev/null; then
            echo "Successfully scaled $appName to 0"
        else
            echo "Error scaling down $appName in $namespace"
            exit 1
        fi

        # Use kubectl wait to ensure all pods with the label app=$appName are terminated
        echo "Waiting for pods to be terminated..."
        if ! kubectl wait pods -l app="$appName" -n "$namespace" --for=delete --timeout="$deadline" &>/dev/null; then
            echo "Timed out waiting for pods of $appName to terminate"
            exit 1
        fi
    done
fi

# Up mode
if [[ $mode == "up" ]]; then
    # Reverse the apps order for "up" mode
    mapfile -t apps < <(printf "%s\n" "${apps[@]}" | tac)

    total_apps=${#apps[@]}
    for index in "${!apps[@]}"; do
        app="${apps[$index]}"
        namespace="${app%%/*}"
        appName="${app##*/}"

        echo "==> Bringing up app $((index+1))/$total_apps: $app"

        # Get the desired replica configuration from the annotation
        encodedReplicaConfig=$(kubectl get applications.skiperator.kartverket.no "$appName" -n "$namespace" -o=jsonpath='{.metadata.annotations.skip\.kartverket\.no/migration-desired-replicas}' || true)

        if [[ -z "$encodedReplicaConfig" ]]; then
            echo "Error: Annotation skip.kartverket.no/migration-desired-replicas not found for $appName in namespace $namespace."
            exit 1
        fi

        replicaConfig=$(echo "$encodedReplicaConfig" | base64 -d)

        # Set the CRD replicas to the desired configuration
        if ! kubectl patch applications.skiperator.kartverket.no "$appName" -n "$namespace" --type=merge -p "{\"spec\":{\"replicas\":$replicaConfig}}" &>/dev/null; then
            echo "Error patching $appName in $namespace"
        fi

        # Wait for a new Deployment to be generated by skiperator
        sleep 5

        # Watch the rollout status until it's done
        kubectl rollout status deployment "$appName" -n "$namespace" --watch --timeout=$deadline

        # Remove the annotations
        if ! kubectl annotate applications.skiperator.kartverket.no "$appName" -n "$namespace" \
            skip.kartverket.no/k8sReplicaLimits- \
            skip.kartverket.no/migration-desired-replicas- &>/dev/null; then
             echo "Error removing annotations from $appName in $namespace"
        fi
    done
fi
